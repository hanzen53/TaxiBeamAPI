<!DOCTYPE>
<html>
<head>
	<link rel="stylesheet" type="text/css" href="/assets/plugins/bootstrap/css/bootstrap.min.css" />
	<script src="/assets/plugins/jquery/jquery-1.12.0.min.js"></script>
	<script src="/assets/plugins/bootstrap/js/bootstrap.min.js"></script>
	<style type="text/css">
		html, body {
			height: 100%;
		}
		body {
			font-size: 13px;
			padding-top: 50px;
		}
		body > .container {
			min-height: 100%;
			position: relative;
			padding-top: 10px;
			box-shadow: 0 0 20px rgba(0,0,0,0.3);
		}
	</style>
	<script type="text/javascript">

		var start_time = 0; // timestamp
		var test_time_limit = 7; // minute
		var logging = true;
		var driver_number = 0; // 0 = all

		var BOTS = {};


		var Driver = {
			searchPassenger: function(driverInfo) {
				Logger.write(driverInfo.fname + ' :: กำลังค้นหาผู้โดยสาร...');
				Driver.updateLatLng(driverInfo);
				$.post('service/drivercs/searchPassenger', driverInfo, function(response) {
					if(response.status) {

						Logger.write(driverInfo.fname + ' :: เจอผู้โดยสารแล้ว จำนวน ' + response.data.length + ' คน');

						BOT.deleteInterval(driverInfo);

						var passenger = {};
						if(response.data.length > 1) {
							passenger = response.data[Math.floor((Math.random() * response.data.length) + 0)];
						}
						else {
							passenger = response.data[0];
						}

						Logger.write(driverInfo.fname + ' :: เลือกผู้โดยสาร เบอร์โทร ' + passenger.phone);
						driverInfo.psg_id = passenger._id;
						Driver.acceptCall(driverInfo);
					}
				});
			},
			researchPassenger: function(driverInfo) {
				var time = getRandomMiliSecond(5000);
				var intervalID = BOT.intervalManager(true, function() {
					Driver.searchPassenger(driverInfo);
				}, time);
				driverInfo.intervalID = intervalID;
			},
			acceptCall: function(driverInfo) {
				driverInfo.status = "WAIT";
				Driver.updateLatLng(driverInfo);
				$.post('service/drivercs/acceptCall', driverInfo, function(response) {
					if(response.status) {
						var intervalID = BOT.intervalManager(true, function() {
							Logger.write(driverInfo.fname + ' :: กำลังรอผู้โดยสารตอบกลับ');

							Driver.getStatus(driverInfo, function(response) {

								if(response.status) {
									if(response.data.status.toLocaleUpperCase() == "BUSY") {

										driverInfo.status = "BUSY";

										Logger.write(driverInfo.fname + ' :: ได้รับการตอบรับแล้ว :: ผู้โดยสารตอบตกลง');

										BOT.deleteInterval(driverInfo);

										Driver.pickPassenger(driverInfo);
									}
									else if (response.data.status.toLocaleUpperCase() == "WAIT") {
										driverInfo.status = "WAIT";

									}
									else if (response.data.status.toLocaleUpperCase() == "ON") {
										driverInfo.status = "ON";
										Logger.write(driverInfo.fname + ' :: ได้รับการตอบรับแล้ว :: ผู้โดยสารปฏิเสธ');

										BOT.deleteInterval(driverInfo);
										Driver.researchPassenger(driverInfo);
									}
								}

							});
						}, 5000);

						driverInfo.intervalID = intervalID;
					}
				});
			},
			getStatus: function(driverInfo, callback) {
				Driver.updateLatLng(driverInfo);
				$.post('service/drivercs/getStatus', driverInfo, callback);
			},
			pickPassenger: function(driverInfo) {
				Logger.write(driverInfo.fname + " :: กำลังไปรับผู้โดยสาร...");
				setTimeout(function() {
					Driver.updateLatLng(driverInfo);
					$.post('service/drivercs/pickPassenger', driverInfo, function(response) {
						if(response.status) {
							if(response.data.status.toLocaleUpperCase() == "PICK") {
								driverInfo.status = "PICK";
								Logger.write(driverInfo.fname + " :: รับผู้โดยสารแล้ว :: กำลังไปส่งยังที่หมาย...");
								BOT.deleteInterval(driverInfo);

								setTimeout(function() {
									Driver.endTrip(driverInfo);
								}, 30000);
							}
							else if(response.data.status.toLocaleUpperCase() == "ON") {
								driverInfo.status = "ON";
								Logger.write("ไม่พบผู้โดยสาร / ไม่สามารถรับผู้โดยสารได้");
								BOT.deleteInterval(driverInfo);
								Driver.researchPassenger(driverInfo);
							}
						}
					});
				}, 30000);
			},
			changeOnOff: function(driverInfo) {
				Driver.updateLatLng(driverInfo);
				$.post('service/drivercs/changeOnOff', driverInfo, function(response) { 
				});
			},
			turnOn: function(driverInfo) {
				Driver.updateLatLng(driverInfo);
				$.post('service/drivercs/changeOnOff', driverInfo, function(response) {
					driverInfo.status = "ON";
					Driver.researchPassenger(driverInfo);
				});
			},
			turnOff: function(driverInfo) {
				Driver.updateLatLng(driverInfo);
				$.post('service/drivercs/changeOnOff', driverInfo, function(response) {
					driverInfo.status = "OFF";
					Logger.write(driverInfo.fname + " :: ปิดระบบแล้ว...");
				});
			},
			endTrip: function(driverInfo) {
				Driver.updateLatLng(driverInfo);
				$.post('service/drivercs/endTrip', driverInfo, function(response) {
					if(response.status) {
						driverInfo.status = "ON";
						Logger.write(driverInfo.fname + " :: ส่งผู้โดยสารเรียบร้อยแล้ว");
						BOT.deleteInterval(driverInfo);
						Driver.researchPassenger(driverInfo);
					} else {
						var time = getRandomMiliSecond(5000);
						var intervalID = BOT.intervalManager(true, function() {
							Driver.searchPassenger(driverInfo);
						}, time);
						driverInfo.intervalID = intervalID;
					}
				});
			},
			updateLatLng: function(driverInfo) {
				var newLatLng = randomLatLng({ lat: driverInfo.curlat, lng: driverInfo.curlng });
				driverInfo.curlat = newLatLng.lat;
				driverInfo.curlng = newLatLng.lng;
				return driverInfo;
			}
		};

		var BOT = {
			start: function() {
				Logger.write("Starting...");
				start_time = new Date().getTime();
				Logger.write("Started");
				BOTS.forEach(function(bot, index) {

					Logger.write("========== ข้อมูลคนขับ ==========");
					Logger.write(bot.fname);
					Logger.write(bot.status.toLocaleUpperCase());
					Logger.write("========== ปิด ==========");

					if(bot.status.toLocaleUpperCase() == "OFF") {
						bot.status = "ON";
						Driver.turnOn(bot);
					}
					else if(bot.status.toLocaleUpperCase() == "ON") {
						Driver.researchPassenger(bot);
					}
					else if(bot.status.toLocaleUpperCase() == "WAIT") {
						bot.status = "ON";
						Driver.turnOn(bot);
					}
					else if(bot.status.toLocaleUpperCase() == "BUSY") {
						Driver.pickPassenger(bot);
					}
					else if(bot.status.toLocaleUpperCase() == "PICK") {
						bot.status = "ON";
						Driver.turnOn(bot);
					}
				});
			},
			deleteInterval: function(driverInfo) {
				this.intervalManager(false, null, null, driverInfo.intervalID);
				delete driverInfo.intervalID;
			},
			clearAllInterval: function() {
				BOTS.filter(function(bot) {
					if(bot.intervalID > 0) {
						clearInterval(bot.intervalID);
					}
				});
			},
			intervalManager: function(flag, action, time, intervalID) {
		        // http://stackoverflow.com/a/10935062
		        if(flag) {
		        	return setInterval(action, time);
		        }
		        else {
		        	return typeof intervalID !== 'undefined' && clearInterval(intervalID);
		        }
		    },
		    turnOffAll: function() {
		    	BOTS.filter(function(bot) {
		    		if(bot.status != "OFF") {
		    			Driver.turnOff(bot);
		    		}
		    	});
		    }
		}

		// Bangkok
		var center = { lat: 13.73538306480221, lng: 100.50121307373047 };

		var randomLatLng = function(center, fixed) {
			if(fixed == undefined || fixed < 1 || fixed > 7) { fixed = 7 }

			var lat_to = center.lat + 0.0008;
			var lat_from = center.lat - 0.0008;
			var lng_to = center.lng + 0.0008;
			var lng_from = center.lng - 0.0008;
			var lat = (Math.random() * (lat_to - lat_from) + lat_from).toFixed(fixed) * 1;
			var lng = (Math.random() * (lng_to - lng_from) + lng_from).toFixed(fixed) * 1;
			return {
				lat: lat,
				lng: lng
			}
		}

		var getRandomMiliSecond = function(limit) {
			if(limit == undefined || limit < 1 || limit > 5000) { limit = 5000 }
			return Math.floor((Math.random() * limit) + 1000);
		};

		var getCurrentTime = function (date_string) {

			var addZero = function (i) {
				if (i < 10) {
					i = "0" + i;
				}
				return i;
			}

			var d = date_string == undefined ? new Date() : new Date(date_string);
			var h = addZero(d.getHours());
			var m = addZero(d.getMinutes());
			var s = addZero(d.getSeconds());

			return h + ":" + m + ":" + s;
		};

		var getAllDriver = function(number) {
			if(number === undefined || number < 0 || typeof number != "number") { 
				number = 1;
			}
			$.post('service/drivercs/all', { number: number }, function(response) {
				BOTS = response;
				Logger.write("service/drivercs/all :: Success");
				Logger.write("number of driver :: " + Object.keys(BOTS).length);
			});
		}

		var Logger = {
			write: function(message) {
				if(logging) {
					var date = new Date().getTime();
					var log = '<div class="log"><span class="time" data-toggle="tooltip" title="' + new Date(date) + '">' + getCurrentTime(date) + '</span> :: <span class="message">' + message + '</span></div>';
					$(".log-wrapper").prepend(log);
					// $(".log-wrapper").find(".log").last().find('[data-toggle="tooltip"]').tooltip({ placement: 'top', container : 'body', animation: false});
				}
			}
		}
	</script>
</head>
<body>
	<!-- Fixed navbar -->
    <nav class="navbar navbar-default navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#"><span class="glyphicon glyphicon-scale"></span> DRIVER Simulator</a>
        </div>
        <div id="navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav navbar-right">
            <li><a href="#initial" onclick="getAllDriver(driver_number)"><span class="glyphicon glyphicon-download"></span> Initial</a></li>
            <li><a href="#start" onclick="BOT.start()"><span class="glyphicon glyphicon-play"></span> Start</a></li>
            <li><a href="#stop" onclick="BOT.clearAllInterval()"><span class="glyphicon glyphicon-stop"></span> Stop</a></li>
            <li><a href="#stop" onclick="BOT.turnOffAll()"><span class="glyphicon glyphicon-record"></span> Turn off All</a></li>
            <li><a href="#clear" onclick="$('.log-wrapper').empty()"><span class="glyphicon glyphicon-repeat"></span> Clear</a></li>
          </ul>
        </div>
      </div>
    </nav>

    <div class="container">
    	<div class="log-wrapper"></div>
    </div>
</body>
</html>